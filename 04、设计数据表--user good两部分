01、app设计
  --users：[包含两张表：UserProfile  |  VerifyCode]
  --商品表格设计
  
02、用户数据表设计
  --from datetime import datetime

    from django.db import models
    from django.contrib.auth.models import AbstractUser


    class UserProfile(AbstractUser):
        """
        用户
        """
        name = models.CharField(max_length=30, null=True, blank=True, verbose_name="姓名")
        birthday = models.DateField(null=True, blank=True, verbose_name="出生年月")
        gender = models.CharField(max_length=6, choices=(("male", u"男"), ("female", "女")), default="female",
                              verbose_name="性别")
        mobile = models.CharField(null=True, blank=True, max_length=11, verbose_name="电话")
        email = models.EmailField(max_length=100, null=True, blank=True, verbose_name="邮箱")

        class Meta:
            verbose_name = "用户"
            verbose_name_plural = "用户"

        def __str__(self):
            return self.name

    # 验证码
    class VerifyCode(models.Model):
        """
        短信验证码
        """
        code = models.CharField(max_length=10, verbose_name="验证码")
        mobile = models.CharField(max_length=11, verbose_name="电话")
        add_time = models.DateTimeField(default=datetime.now, verbose_name="添加时间")

        class Meta:
            verbose_name = "短信验证码"
            verbose_name_plural = verbose_name

        def __str__(self):
            return self.code
  --在在settings.py中INSTALLED_APPS添加users.apps.UsersConfig
  --此时项目结构如下所示：
    --MxShop
      --apps [所有的应用都是存放在这个文件夹中][右击 --> Mark Directory As --> Source Root，将其作为库文件夹]
             [Mark之后django默认在settings.py文件中加一句sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))]
        --goods [使用 python manage.py startapp goods 创建的项目app，再将其拖至apps文件夹下]
        --trade [使用 python manage.py startapp trade 创建的项目app，再将其拖至apps文件夹下]
        --users [使用 python manage.py startapp users 创建的项目app，再将其拖至apps文件夹下]
        --user_operation [使用 python manage.py startapp user_operation 创建的项目app，再将其拖至apps文件夹下]
      --db_tools
      --extra_apps [存放额外第三方包的文件夹，未安装的库][右击 --> Mark Directory As --> Source Root，将其作为库文件夹]
                   [Mark之后django默认在settings.py文件中加一句sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))]
        --DjangoUeditor [一个富文本编辑器]
      --media
      --MxShop [项目根目录 | 可以放项目代码，但是暂时不需要]
      --templates [模板文件存放位置]
      --db.sqlite3 [sqlite数据库 | 系统自带 | 不一定用得上]
      --manage.py [存放django框架核心命令的文件]

03、商品数据表设计
  --from datetime import datetime

    from django.db import models
    from DjangoUeditor.models import UEditorField
    # Create your models here.


    class GoodsCategory(models.Model):
        """
        商品类别
        """
        CATEGORY_TYPE = (
            (1, "一级类目"),
            (2, "二级类目"),
            (3, "三级类目"),
        )

        name = models.CharField(default="", max_length=30, verbose_name="类别名", help_text="类别名")
        code = models.CharField(default="", max_length=30, verbose_name="类别code", help_text="类别code")
        desc = models.TextField(default="", verbose_name="类别描述", help_text="类别描述")
        category_type = models.IntegerField(choices=CATEGORY_TYPE, verbose_name="类目级别", help_text="类目级别")
        parent_category = models.ForeignKey("self", null=True, blank=True, verbose_name="父类目级别", help_text="父目录",
                                        related_name="sub_cat")
        is_tab = models.BooleanField(default=False, verbose_name="是否导航", help_text="是否导航")
        add_time = models.DateTimeField(default=datetime.now, verbose_name="添加时间")

        class Meta:
            verbose_name = "商品类别"
            verbose_name_plural = verbose_name

        def __str__(self):
            return self.name


    class GoodsCategoryBrand(models.Model):
        """
        品牌名
        """
        category = models.ForeignKey(GoodsCategory, related_name='brands', null=True, blank=True, verbose_name="商品类目")
        name = models.CharField(default="", max_length=30, verbose_name="品牌名", help_text="品牌名")
        desc = models.TextField(default="", max_length=200, verbose_name="品牌描述", help_text="品牌描述")
        image = models.ImageField(max_length=200, upload_to="brands/")
        add_time = models.DateTimeField(default=datetime.now, verbose_name="添加时间")

        class Meta:
            verbose_name = "品牌"
            verbose_name_plural = verbose_name
            db_table = "goods_goodsbrand"

        def __str__(self):
            return self.name


    class Goods(models.Model):
        """
        商品
        """
        category = models.ForeignKey(GoodsCategory, verbose_name="商品类目")
        goods_sn = models.CharField(max_length=50, default="", verbose_name="商品唯一货号")
        name = models.CharField(max_length=100, verbose_name="商品名")
        click_num = models.IntegerField(default=0, verbose_name="点击数")
        sold_num = models.IntegerField(default=0, verbose_name="商品销售量")
        fav_num = models.IntegerField(default=0, verbose_name="收藏数")
        goods_num = models.IntegerField(default=0, verbose_name="库存数")
        market_price = models.FloatField(default=0, verbose_name="市场价格")
        shop_price = models.FloatField(default=0, verbose_name="本店价格")
        goods_brief = models.TextField(max_length=500, verbose_name="商品简短描述")
        goods_desc = UEditorField(verbose_name=u"内容", imagePath="goods/images/", width=1000, height=300,
                              filePath="goods/files/", default='')
        ship_free = models.BooleanField(default=True, verbose_name="是否承担运费")
        goods_front_image = models.ImageField(upload_to="goods/images/", null=True, blank=True, verbose_name="封面图")
        is_new = models.BooleanField(default=False, verbose_name="是否新品")
        is_hot = models.BooleanField(default=False, verbose_name="是否热销")
        add_time = models.DateTimeField(default=datetime.now, verbose_name="添加时间")

        class Meta:
            verbose_name = '商品'
            verbose_name_plural = verbose_name

        def __str__(self):
            return self.name


    class IndexAd(models.Model):
        category = models.ForeignKey(GoodsCategory, related_name='category',verbose_name="商品类目")
        goods =models.ForeignKey(Goods, related_name='goods')

        class Meta:
            verbose_name = '首页商品类别广告'
            verbose_name_plural = verbose_name

        def __str__(self):
            return self.goods.name


    class GoodsImage(models.Model):
        """
        商品轮播图
        """
        goods = models.ForeignKey(Goods, verbose_name="商品", related_name="images")
        image = models.ImageField(upload_to="", verbose_name="图片", null=True, blank=True)
        add_time = models.DateTimeField(default=datetime.now, verbose_name="添加时间")

        class Meta:
            verbose_name = '商品图片'
            verbose_name_plural = verbose_name

        def __str__(self):
            return self.goods.name


    class Banner(models.Model):
        """
        轮播的商品
        """
        goods = models.ForeignKey(Goods, verbose_name="商品")
        image = models.ImageField(upload_to='banner', verbose_name="轮播图片")
        index = models.IntegerField(default=0, verbose_name="轮播顺序")
        add_time = models.DateTimeField(default=datetime.now, verbose_name="添加时间")

        class Meta:
            verbose_name = '轮播商品'
            verbose_name_plural = verbose_name

        def __str__(self):
            return self.goods.name


    class HotSearchWords(models.Model):
        """
        热搜词
        """
        keywords = models.CharField(default="", max_length=20, verbose_name="热搜词")
        index = models.IntegerField(default=0, verbose_name="排序")
        add_time = models.DateTimeField(default=datetime.now, verbose_name="添加时间")

        class Meta:
            verbose_name = '热搜词'
            verbose_name_plural = verbose_name

        def __str__(self):
            return self.keywords

04、在settings.py中添加apps
  --INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'DjangoUeditor',
    'users.apps.UsersConfig',
    'users',
    'goods',
    'trade',
    'user_operation'
  ]
