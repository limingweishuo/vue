1、vue介绍
    vue.js不是一个框架，只聚焦于视图层，是一个构建数据驱动的web界面的库，通过简单的API实现灵活的组件系统和高效的数据绑定。
        --vue轻量、数据绑定灵活
        --有内置指令和自定义指令
        --有内置过滤器和自定义过滤器
        --vue核心库不包含router、ajax、表单验证等功能，但是可以方便的加载插件实现相关功能

2、vue安装
    --可以使用CDN文件[就是网络服务器中的js]，也可以使用本地冗余文件[推荐]的形式来实现
    --<script src="js/vue.min.js"></script>    如果html和js同级目录
    
3、示例01--头文件什么的都没有加上去
    <body>
        <div id="didi-navigator">
            <ul v-for="tab in tabs">
              <li>{{tab.text}}</li>
            </ul>
      </div>
    </body>
    <script>
      var app= new Vue({
          el:"#didi-navigator",
          data:{
            tabs:[
              {text:'巴士'},
              {text:'快车'},
              {text:'专车'},
              {text:'顺风车'},
              {text:'出租车'},
              {text:'代驾'}
            ]
          }
        })	
    </script>

4、数据绑定
    --数据绑定：将数据和视图建立联系，数据变化视图随之变化
    4、1  插值
        --{{}}：双大括号插值
            <span>Text:{{text}}</span>
            --标签{{text}}会被相应的数据对象text属性的值替换掉，text属性的值变化，相应的标签也会变化
            <span>Text:{{*text}}</span>
            --如果希望只渲染一次，后续数据变化不再关心，可以添加一个*
            
        --{{{}}}：三大括号，双大括号中标签当字符串处理，三大括号中标签当html元素处理
            <span>Logo:{{{logo}}}</span>
            logo: '<p>这是新的标题</p'
            
        --双大括号还可以放在html的标签内
            <li data-id='{{id}}'></li>
            
        --vue指令和自身特性内不可以插值
    
    4、2  表达式
        表达式：各种数值、变量、运算符的综合体，表达式的值是其运算结果。
            <!--js表达式-->
                {{cents/100}}
                {{true? 1:0}}
                {{example.split(',')}}
            <!--无效示例-->
                {{var logo='DEBUG'}}  这是语句，不是表达式
                {{if(true) return 'DFFE'}}  不支持条件控制，可以使用三元控制符
            <!--过滤器-->
                --vue支持类似于linux系统那样的管道，允许在后面添加过滤符，还允许过滤器串联，还允许过滤器传递参数               
                    {{example| filter1 | filter2 }}  过滤器串联
                    {{example| filter a b}}  传参数，a b参数用空格隔开
                    {{example|toUpperCase}}  最基础的过滤器--全部转换为大写
                    
    4、3分隔符--在Vue中使用{{ 内容 }}作为普通文本的插值符号，{{{}}}作为html文本的插值符号
        --Vue.config.delimiters 已失效
        --现使用： delimiters: ['%{', '}']，示例如下
            <body>
                <div id="app">
                    <p>%{ message }</p>
                    <p>%{ message01 }</p>
                </div>
                <script>
                    var app = new Vue({
                        delimiters: ['%{', '}'],
                        el: "#app",
                        data: {
                            message: 'Hello vue.js',
                            message01: 'Hello liming'
                        }
                    })

                    let b = 2;
                    console.log('区块内b=',b);
                </script>
            </body>
        --Vue.config.unusafeDelimiters 也已失效
        --现使用 v-html v-text指令，故需要自己斟酌使用，暂时无示例，不过和django语法无冲突
    4、4 指令
        指令：带有v-前缀的特殊特性，其值限定为绑定表达式，即javascript表达式和过滤器
        指令的作用：当表达式的值发生变化时，这个变化也发生在DOM上
            <div v-if="show">DFFE</div>
                --当show的值为true时，DFFE展示否则不展示
                
            --有的指令不同，在指令和表达式之间插入参数
                <a v-bind:href="url"></a>
                <div v-on:click="action"></div>
        
        
        
        
        
        
        
